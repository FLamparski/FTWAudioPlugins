/* ------------------------------------------------------------
name: "WeirdOrgan"
Code generated with Faust 2.40.0 (https://faust.grame.fr)
Compilation options: -a ..\iPlug2\IPlug\Extras\Faust\IPlugFaust_arch.cpp -lang cpp -i -cn Faust1 -es 1 -mcd 16 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __Faust1_H__
#define  __Faust1_H__


#include "IPlugFaust.h"

/* BEGIN AUTO GENERATED BY THE FAUST COMPILER ... */
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS Faust1
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float Faust1_faustpower2_f(float value) {
	return value * value;
}

class Faust1 : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	FAUSTFLOAT fHslider1;
	FAUSTFLOAT fVslider0;
	FAUSTFLOAT fHslider2;
	int fSampleRate;
	float fConst0;
	float fConst1;
	FAUSTFLOAT fHslider3;
	int iRec2[2];
	float fRec1[3];
	float fRec0[3];
	FAUSTFLOAT fVslider1;
	FAUSTFLOAT fButton0;
	float fVec0[2];
	float fRec3[2];
	FAUSTFLOAT fVslider2;
	FAUSTFLOAT fVslider3;
	FAUSTFLOAT fVslider4;
	int iRec4[2];
	FAUSTFLOAT fVslider5;
	float fConst2;
	float fRec6[3];
	float fRec5[3];
	FAUSTFLOAT fVslider6;
	FAUSTFLOAT fVslider7;
	FAUSTFLOAT fVslider8;
	FAUSTFLOAT fVslider9;
	FAUSTFLOAT fVslider10;
	float fConst3;
	float fRec8[3];
	float fRec7[3];
	FAUSTFLOAT fVslider11;
	FAUSTFLOAT fVslider12;
	FAUSTFLOAT fVslider13;
	FAUSTFLOAT fVslider14;
	FAUSTFLOAT fVslider15;
	float fConst4;
	float fRec10[3];
	float fRec9[3];
	FAUSTFLOAT fVslider16;
	FAUSTFLOAT fVslider17;
	FAUSTFLOAT fVslider18;
	FAUSTFLOAT fVslider19;
	FAUSTFLOAT fVslider20;
	float fConst5;
	float fRec12[3];
	float fRec11[3];
	FAUSTFLOAT fVslider21;
	FAUSTFLOAT fVslider22;
	FAUSTFLOAT fVslider23;
	FAUSTFLOAT fVslider24;
	FAUSTFLOAT fVslider25;
	float fConst6;
	float fRec14[3];
	float fRec13[3];
	FAUSTFLOAT fVslider26;
	FAUSTFLOAT fVslider27;
	FAUSTFLOAT fVslider28;
	FAUSTFLOAT fVslider29;
	FAUSTFLOAT fVslider30;
	float fConst7;
	float fRec16[3];
	float fRec15[3];
	FAUSTFLOAT fVslider31;
	FAUSTFLOAT fVslider32;
	FAUSTFLOAT fVslider33;
	FAUSTFLOAT fVslider34;
	FAUSTFLOAT fVslider35;
	float fConst8;
	float fRec18[3];
	float fRec17[3];
	FAUSTFLOAT fVslider36;
	FAUSTFLOAT fVslider37;
	FAUSTFLOAT fVslider38;
	FAUSTFLOAT fVslider39;
	FAUSTFLOAT fVslider40;
	float fConst9;
	float fRec20[3];
	float fRec19[3];
	FAUSTFLOAT fVslider41;
	FAUSTFLOAT fVslider42;
	FAUSTFLOAT fVslider43;
	FAUSTFLOAT fVslider44;
	FAUSTFLOAT fVslider45;
	float fConst10;
	float fRec22[3];
	float fRec21[3];
	FAUSTFLOAT fVslider46;
	FAUSTFLOAT fVslider47;
	FAUSTFLOAT fVslider48;
	FAUSTFLOAT fVslider49;
	
 public:
	
	void metadata(Meta* m) { 
		m->declare("compile_options", "-a ..\iPlug2\IPlug\Extras\Faust\IPlugFaust_arch.cpp -lang cpp -i -cn Faust1 -es 1 -mcd 16 -single -ftz 0");
		m->declare("envelopes.lib/adsr:author", "Yann Orlarey and Andrey Bundin");
		m->declare("envelopes.lib/author", "GRAME");
		m->declare("envelopes.lib/copyright", "GRAME");
		m->declare("envelopes.lib/license", "LGPL with exception");
		m->declare("envelopes.lib/name", "Faust Envelope Library");
		m->declare("envelopes.lib/version", "0.1");
		m->declare("filename", "WeirdOrgan.dsp");
		m->declare("filters.lib/fir:author", "Julius O. Smith III");
		m->declare("filters.lib/fir:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/fir:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/iir:author", "Julius O. Smith III");
		m->declare("filters.lib/iir:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/iir:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/lowpass0_highpass1", "MIT-style STK-4.3 license");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/resonbp:author", "Julius O. Smith III");
		m->declare("filters.lib/resonbp:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/resonbp:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf2:author", "Julius O. Smith III");
		m->declare("filters.lib/tf2:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf2:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf2s:author", "Julius O. Smith III");
		m->declare("filters.lib/tf2s:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf2s:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/version", "0.3");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.3");
		m->declare("name", "WeirdOrgan");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("options", "[midi:on][nvoices:8]");
		m->declare("platform.lib/name", "Generic Platform Library");
		m->declare("platform.lib/version", "0.1");
	}

	virtual int getNumInputs() {
		return 0;
	}
	virtual int getNumOutputs() {
		return 2;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = std::min<float>(192000.0f, std::max<float>(1.0f, float(fSampleRate)));
		fConst1 = 1.57079637f / fConst0;
		fConst2 = 3.14159274f / fConst0;
		fConst3 = 6.28318548f / fConst0;
		fConst4 = 12.566371f / fConst0;
		fConst5 = 18.849556f / fConst0;
		fConst6 = 25.1327419f / fConst0;
		fConst7 = 31.415926f / fConst0;
		fConst8 = 37.6991119f / fConst0;
		fConst9 = 43.982296f / fConst0;
		fConst10 = 50.2654839f / fConst0;
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(0.5f);
		fHslider1 = FAUSTFLOAT(0.5f);
		fVslider0 = FAUSTFLOAT(0.5f);
		fHslider2 = FAUSTFLOAT(20.0f);
		fHslider3 = FAUSTFLOAT(200.0f);
		fVslider1 = FAUSTFLOAT(0.01f);
		fButton0 = FAUSTFLOAT(0.0f);
		fVslider2 = FAUSTFLOAT(0.59999999999999998f);
		fVslider3 = FAUSTFLOAT(0.29999999999999999f);
		fVslider4 = FAUSTFLOAT(0.5f);
		fVslider5 = FAUSTFLOAT(1.0f);
		fVslider6 = FAUSTFLOAT(0.01f);
		fVslider7 = FAUSTFLOAT(0.59999999999999998f);
		fVslider8 = FAUSTFLOAT(0.29999999999999999f);
		fVslider9 = FAUSTFLOAT(0.5f);
		fVslider10 = FAUSTFLOAT(0.25f);
		fVslider11 = FAUSTFLOAT(0.01f);
		fVslider12 = FAUSTFLOAT(0.59999999999999998f);
		fVslider13 = FAUSTFLOAT(0.29999999999999999f);
		fVslider14 = FAUSTFLOAT(0.5f);
		fVslider15 = FAUSTFLOAT(0.25f);
		fVslider16 = FAUSTFLOAT(0.01f);
		fVslider17 = FAUSTFLOAT(0.59999999999999998f);
		fVslider18 = FAUSTFLOAT(0.29999999999999999f);
		fVslider19 = FAUSTFLOAT(0.5f);
		fVslider20 = FAUSTFLOAT(0.25f);
		fVslider21 = FAUSTFLOAT(0.01f);
		fVslider22 = FAUSTFLOAT(0.59999999999999998f);
		fVslider23 = FAUSTFLOAT(0.29999999999999999f);
		fVslider24 = FAUSTFLOAT(0.5f);
		fVslider25 = FAUSTFLOAT(0.25f);
		fVslider26 = FAUSTFLOAT(0.01f);
		fVslider27 = FAUSTFLOAT(0.59999999999999998f);
		fVslider28 = FAUSTFLOAT(0.29999999999999999f);
		fVslider29 = FAUSTFLOAT(0.5f);
		fVslider30 = FAUSTFLOAT(0.25f);
		fVslider31 = FAUSTFLOAT(0.01f);
		fVslider32 = FAUSTFLOAT(0.59999999999999998f);
		fVslider33 = FAUSTFLOAT(0.29999999999999999f);
		fVslider34 = FAUSTFLOAT(0.5f);
		fVslider35 = FAUSTFLOAT(0.25f);
		fVslider36 = FAUSTFLOAT(0.01f);
		fVslider37 = FAUSTFLOAT(0.59999999999999998f);
		fVslider38 = FAUSTFLOAT(0.29999999999999999f);
		fVslider39 = FAUSTFLOAT(0.5f);
		fVslider40 = FAUSTFLOAT(0.10000000000000001f);
		fVslider41 = FAUSTFLOAT(0.01f);
		fVslider42 = FAUSTFLOAT(0.59999999999999998f);
		fVslider43 = FAUSTFLOAT(0.29999999999999999f);
		fVslider44 = FAUSTFLOAT(0.5f);
		fVslider45 = FAUSTFLOAT(0.10000000000000001f);
		fVslider46 = FAUSTFLOAT(0.01f);
		fVslider47 = FAUSTFLOAT(0.59999999999999998f);
		fVslider48 = FAUSTFLOAT(0.29999999999999999f);
		fVslider49 = FAUSTFLOAT(0.5f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
			iRec2[l0] = 0;
		}
		for (int l1 = 0; l1 < 3; l1 = l1 + 1) {
			fRec1[l1] = 0.0f;
		}
		for (int l2 = 0; l2 < 3; l2 = l2 + 1) {
			fRec0[l2] = 0.0f;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			fVec0[l3] = 0.0f;
		}
		for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
			fRec3[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 2; l5 = l5 + 1) {
			iRec4[l5] = 0;
		}
		for (int l6 = 0; l6 < 3; l6 = l6 + 1) {
			fRec6[l6] = 0.0f;
		}
		for (int l7 = 0; l7 < 3; l7 = l7 + 1) {
			fRec5[l7] = 0.0f;
		}
		for (int l8 = 0; l8 < 3; l8 = l8 + 1) {
			fRec8[l8] = 0.0f;
		}
		for (int l9 = 0; l9 < 3; l9 = l9 + 1) {
			fRec7[l9] = 0.0f;
		}
		for (int l10 = 0; l10 < 3; l10 = l10 + 1) {
			fRec10[l10] = 0.0f;
		}
		for (int l11 = 0; l11 < 3; l11 = l11 + 1) {
			fRec9[l11] = 0.0f;
		}
		for (int l12 = 0; l12 < 3; l12 = l12 + 1) {
			fRec12[l12] = 0.0f;
		}
		for (int l13 = 0; l13 < 3; l13 = l13 + 1) {
			fRec11[l13] = 0.0f;
		}
		for (int l14 = 0; l14 < 3; l14 = l14 + 1) {
			fRec14[l14] = 0.0f;
		}
		for (int l15 = 0; l15 < 3; l15 = l15 + 1) {
			fRec13[l15] = 0.0f;
		}
		for (int l16 = 0; l16 < 3; l16 = l16 + 1) {
			fRec16[l16] = 0.0f;
		}
		for (int l17 = 0; l17 < 3; l17 = l17 + 1) {
			fRec15[l17] = 0.0f;
		}
		for (int l18 = 0; l18 < 3; l18 = l18 + 1) {
			fRec18[l18] = 0.0f;
		}
		for (int l19 = 0; l19 < 3; l19 = l19 + 1) {
			fRec17[l19] = 0.0f;
		}
		for (int l20 = 0; l20 < 3; l20 = l20 + 1) {
			fRec20[l20] = 0.0f;
		}
		for (int l21 = 0; l21 < 3; l21 = l21 + 1) {
			fRec19[l21] = 0.0f;
		}
		for (int l22 = 0; l22 < 3; l22 = l22 + 1) {
			fRec22[l22] = 0.0f;
		}
		for (int l23 = 0; l23 < 3; l23 = l23 + 1) {
			fRec21[l23] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual Faust1* clone() {
		return new Faust1();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("WeirdOrgan");
		ui_interface->addVerticalSlider("attack 0", &fVslider1, FAUSTFLOAT(0.00999999978f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("attack 1", &fVslider6, FAUSTFLOAT(0.00999999978f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("attack 10", &fVslider31, FAUSTFLOAT(0.00999999978f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("attack 12", &fVslider36, FAUSTFLOAT(0.00999999978f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("attack 14", &fVslider41, FAUSTFLOAT(0.00999999978f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("attack 16", &fVslider46, FAUSTFLOAT(0.00999999978f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("attack 2", &fVslider11, FAUSTFLOAT(0.00999999978f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("attack 4", &fVslider16, FAUSTFLOAT(0.00999999978f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("attack 6", &fVslider21, FAUSTFLOAT(0.00999999978f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("attack 8", &fVslider26, FAUSTFLOAT(0.00999999978f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("decay 0", &fVslider3, FAUSTFLOAT(0.300000012f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("decay 1", &fVslider8, FAUSTFLOAT(0.300000012f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("decay 10", &fVslider33, FAUSTFLOAT(0.300000012f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("decay 12", &fVslider38, FAUSTFLOAT(0.300000012f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("decay 14", &fVslider43, FAUSTFLOAT(0.300000012f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("decay 16", &fVslider48, FAUSTFLOAT(0.300000012f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("decay 2", &fVslider13, FAUSTFLOAT(0.300000012f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("decay 4", &fVslider18, FAUSTFLOAT(0.300000012f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("decay 6", &fVslider23, FAUSTFLOAT(0.300000012f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("decay 8", &fVslider28, FAUSTFLOAT(0.300000012f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->declare(&fHslider3, "hidden", "1");
		ui_interface->addHorizontalSlider("freq", &fHslider3, FAUSTFLOAT(200.0f), FAUSTFLOAT(50.0f), FAUSTFLOAT(1000.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->declare(&fHslider1, "hidden", "1");
		ui_interface->addHorizontalSlider("gain", &fHslider1, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->declare(&fButton0, "hidden", "1");
		ui_interface->addButton("gate", &fButton0);
		ui_interface->addVerticalSlider("partial gain 0", &fVslider0, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->addVerticalSlider("partial gain 1", &fVslider5, FAUSTFLOAT(1.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->addVerticalSlider("partial gain 10", &fVslider30, FAUSTFLOAT(0.25f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->addVerticalSlider("partial gain 12", &fVslider35, FAUSTFLOAT(0.25f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->addVerticalSlider("partial gain 14", &fVslider40, FAUSTFLOAT(0.100000001f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->addVerticalSlider("partial gain 16", &fVslider45, FAUSTFLOAT(0.100000001f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->addVerticalSlider("partial gain 2", &fVslider10, FAUSTFLOAT(0.25f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->addVerticalSlider("partial gain 4", &fVslider15, FAUSTFLOAT(0.25f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->addVerticalSlider("partial gain 6", &fVslider20, FAUSTFLOAT(0.25f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->addVerticalSlider("partial gain 8", &fVslider25, FAUSTFLOAT(0.25f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->addHorizontalSlider("q", &fHslider2, FAUSTFLOAT(20.0f), FAUSTFLOAT(2.0f), FAUSTFLOAT(40.0f), FAUSTFLOAT(0.100000001f));
		ui_interface->addVerticalSlider("release 0", &fVslider4, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("release 1", &fVslider9, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("release 10", &fVslider34, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("release 12", &fVslider39, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("release 14", &fVslider44, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("release 16", &fVslider49, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("release 2", &fVslider14, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("release 4", &fVslider19, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("release 6", &fVslider24, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("release 8", &fVslider29, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.00100000005f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("sustain 0", &fVslider2, FAUSTFLOAT(0.600000024f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("sustain 1", &fVslider7, FAUSTFLOAT(0.600000024f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("sustain 10", &fVslider32, FAUSTFLOAT(0.600000024f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("sustain 12", &fVslider37, FAUSTFLOAT(0.600000024f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("sustain 14", &fVslider42, FAUSTFLOAT(0.600000024f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("sustain 16", &fVslider47, FAUSTFLOAT(0.600000024f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("sustain 2", &fVslider12, FAUSTFLOAT(0.600000024f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("sustain 4", &fVslider17, FAUSTFLOAT(0.600000024f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("sustain 6", &fVslider22, FAUSTFLOAT(0.600000024f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addVerticalSlider("sustain 8", &fVslider27, FAUSTFLOAT(0.600000024f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00100000005f));
		ui_interface->addHorizontalSlider("volume", &fHslider0, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.00999999978f));
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = 0.0833333358f * float(fHslider0) * float(fHslider1);
		float fSlow1 = float(fHslider2);
		float fSlow2 = 0.5f - 0.0250000004f * fSlow1;
		float fSlow3 = float(fVslider0) + fSlow2;
		float fSlow4 = float(fHslider3);
		float fSlow5 = std::tan(fConst1 * fSlow4);
		float fSlow6 = 1.0f / fSlow1;
		float fSlow7 = 1.0f / fSlow5;
		float fSlow8 = (fSlow6 + fSlow7) / fSlow5 + 1.0f;
		float fSlow9 = 0.5f / (fSlow5 * fSlow8);
		float fSlow10 = 0.0f - fSlow9;
		float fSlow11 = 1.0f / fSlow8;
		float fSlow12 = 1.0f - (fSlow6 - fSlow7) / fSlow5;
		float fSlow13 = 2.0f * (1.0f - 1.0f / Faust1_faustpower2_f(fSlow5));
		float fSlow14 = 0.5f / fSlow5;
		float fSlow15 = std::max<float>(1.0f, fConst0 * float(fVslider1));
		float fSlow16 = 1.0f / fSlow15;
		float fSlow17 = float(fButton0);
		float fSlow18 = float(fVslider2);
		float fSlow19 = (1.0f - fSlow18) / std::max<float>(1.0f, fConst0 * float(fVslider3));
		float fSlow20 = 1.0f / std::max<float>(1.0f, fConst0 * float(fVslider4));
		int iSlow21 = fSlow17 == 0.0f;
		float fSlow22 = float(fVslider5) + fSlow2;
		float fSlow23 = std::tan(fConst2 * fSlow4);
		float fSlow24 = 1.0f / fSlow23;
		float fSlow25 = (fSlow6 + fSlow24) / fSlow23 + 1.0f;
		float fSlow26 = 0.5f / (fSlow23 * fSlow25);
		float fSlow27 = 0.0f - fSlow26;
		float fSlow28 = 1.0f / fSlow25;
		float fSlow29 = 1.0f - (fSlow6 - fSlow24) / fSlow23;
		float fSlow30 = 2.0f * (1.0f - 1.0f / Faust1_faustpower2_f(fSlow23));
		float fSlow31 = 0.5f / fSlow23;
		float fSlow32 = std::max<float>(1.0f, fConst0 * float(fVslider6));
		float fSlow33 = 1.0f / fSlow32;
		float fSlow34 = float(fVslider7);
		float fSlow35 = (1.0f - fSlow34) / std::max<float>(1.0f, fConst0 * float(fVslider8));
		float fSlow36 = 1.0f / std::max<float>(1.0f, fConst0 * float(fVslider9));
		float fSlow37 = float(fVslider10) + fSlow2;
		float fSlow38 = std::tan(fConst3 * fSlow4);
		float fSlow39 = 1.0f / fSlow38;
		float fSlow40 = (fSlow6 + fSlow39) / fSlow38 + 1.0f;
		float fSlow41 = 0.5f / (fSlow38 * fSlow40);
		float fSlow42 = 0.0f - fSlow41;
		float fSlow43 = 1.0f / fSlow40;
		float fSlow44 = 1.0f - (fSlow6 - fSlow39) / fSlow38;
		float fSlow45 = 2.0f * (1.0f - 1.0f / Faust1_faustpower2_f(fSlow38));
		float fSlow46 = 0.5f / fSlow38;
		float fSlow47 = std::max<float>(1.0f, fConst0 * float(fVslider11));
		float fSlow48 = 1.0f / fSlow47;
		float fSlow49 = float(fVslider12);
		float fSlow50 = (1.0f - fSlow49) / std::max<float>(1.0f, fConst0 * float(fVslider13));
		float fSlow51 = 1.0f / std::max<float>(1.0f, fConst0 * float(fVslider14));
		float fSlow52 = float(fVslider15) + fSlow2;
		float fSlow53 = std::tan(fConst4 * fSlow4);
		float fSlow54 = 1.0f / fSlow53;
		float fSlow55 = (fSlow6 + fSlow54) / fSlow53 + 1.0f;
		float fSlow56 = 0.5f / (fSlow53 * fSlow55);
		float fSlow57 = 0.0f - fSlow56;
		float fSlow58 = 1.0f / fSlow55;
		float fSlow59 = (fSlow54 - fSlow6) / fSlow53 + 1.0f;
		float fSlow60 = 2.0f * (1.0f - 1.0f / Faust1_faustpower2_f(fSlow53));
		float fSlow61 = 0.5f / fSlow53;
		float fSlow62 = std::max<float>(1.0f, fConst0 * float(fVslider16));
		float fSlow63 = 1.0f / fSlow62;
		float fSlow64 = float(fVslider17);
		float fSlow65 = (1.0f - fSlow64) / std::max<float>(1.0f, fConst0 * float(fVslider18));
		float fSlow66 = 1.0f / std::max<float>(1.0f, fConst0 * float(fVslider19));
		float fSlow67 = float(fVslider20) + fSlow2;
		float fSlow68 = std::tan(fConst5 * fSlow4);
		float fSlow69 = 1.0f / fSlow68;
		float fSlow70 = (fSlow6 + fSlow69) / fSlow68 + 1.0f;
		float fSlow71 = 0.5f / (fSlow68 * fSlow70);
		float fSlow72 = 0.0f - fSlow71;
		float fSlow73 = 1.0f / fSlow70;
		float fSlow74 = 1.0f - (fSlow6 - fSlow69) / fSlow68;
		float fSlow75 = 2.0f * (1.0f - 1.0f / Faust1_faustpower2_f(fSlow68));
		float fSlow76 = 0.5f / fSlow68;
		float fSlow77 = std::max<float>(1.0f, fConst0 * float(fVslider21));
		float fSlow78 = 1.0f / fSlow77;
		float fSlow79 = float(fVslider22);
		float fSlow80 = (1.0f - fSlow79) / std::max<float>(1.0f, fConst0 * float(fVslider23));
		float fSlow81 = 1.0f / std::max<float>(1.0f, fConst0 * float(fVslider24));
		float fSlow82 = float(fVslider25) + fSlow2;
		float fSlow83 = std::tan(fConst6 * fSlow4);
		float fSlow84 = 1.0f / fSlow83;
		float fSlow85 = (fSlow6 + fSlow84) / fSlow83 + 1.0f;
		float fSlow86 = 0.5f / (fSlow83 * fSlow85);
		float fSlow87 = 0.0f - fSlow86;
		float fSlow88 = 1.0f / fSlow85;
		float fSlow89 = (fSlow84 - fSlow6) / fSlow83 + 1.0f;
		float fSlow90 = 2.0f * (1.0f - 1.0f / Faust1_faustpower2_f(fSlow83));
		float fSlow91 = 0.5f / fSlow83;
		float fSlow92 = std::max<float>(1.0f, fConst0 * float(fVslider26));
		float fSlow93 = 1.0f / fSlow92;
		float fSlow94 = float(fVslider27);
		float fSlow95 = (1.0f - fSlow94) / std::max<float>(1.0f, fConst0 * float(fVslider28));
		float fSlow96 = 1.0f / std::max<float>(1.0f, fConst0 * float(fVslider29));
		float fSlow97 = float(fVslider30) + fSlow2;
		float fSlow98 = std::tan(fConst7 * fSlow4);
		float fSlow99 = 1.0f / fSlow98;
		float fSlow100 = (fSlow6 + fSlow99) / fSlow98 + 1.0f;
		float fSlow101 = 0.5f / (fSlow98 * fSlow100);
		float fSlow102 = 0.0f - fSlow101;
		float fSlow103 = 1.0f / fSlow100;
		float fSlow104 = (fSlow99 - fSlow6) / fSlow98 + 1.0f;
		float fSlow105 = 2.0f * (1.0f - 1.0f / Faust1_faustpower2_f(fSlow98));
		float fSlow106 = 0.5f / fSlow98;
		float fSlow107 = std::max<float>(1.0f, fConst0 * float(fVslider31));
		float fSlow108 = 1.0f / fSlow107;
		float fSlow109 = float(fVslider32);
		float fSlow110 = (1.0f - fSlow109) / std::max<float>(1.0f, fConst0 * float(fVslider33));
		float fSlow111 = 1.0f / std::max<float>(1.0f, fConst0 * float(fVslider34));
		float fSlow112 = float(fVslider35) + fSlow2;
		float fSlow113 = std::tan(fConst8 * fSlow4);
		float fSlow114 = 1.0f / fSlow113;
		float fSlow115 = (fSlow6 + fSlow114) / fSlow113 + 1.0f;
		float fSlow116 = 0.5f / (fSlow113 * fSlow115);
		float fSlow117 = 0.0f - fSlow116;
		float fSlow118 = 1.0f / fSlow115;
		float fSlow119 = (fSlow114 - fSlow6) / fSlow113 + 1.0f;
		float fSlow120 = 2.0f * (1.0f - 1.0f / Faust1_faustpower2_f(fSlow113));
		float fSlow121 = 0.5f / fSlow113;
		float fSlow122 = std::max<float>(1.0f, fConst0 * float(fVslider36));
		float fSlow123 = 1.0f / fSlow122;
		float fSlow124 = float(fVslider37);
		float fSlow125 = (1.0f - fSlow124) / std::max<float>(1.0f, fConst0 * float(fVslider38));
		float fSlow126 = 1.0f / std::max<float>(1.0f, fConst0 * float(fVslider39));
		float fSlow127 = float(fVslider40) + fSlow2;
		float fSlow128 = std::tan(fConst9 * fSlow4);
		float fSlow129 = 1.0f / fSlow128;
		float fSlow130 = (fSlow6 + fSlow129) / fSlow128 + 1.0f;
		float fSlow131 = 0.5f / (fSlow128 * fSlow130);
		float fSlow132 = 0.0f - fSlow131;
		float fSlow133 = 1.0f / fSlow130;
		float fSlow134 = (fSlow129 - fSlow6) / fSlow128 + 1.0f;
		float fSlow135 = 2.0f * (1.0f - 1.0f / Faust1_faustpower2_f(fSlow128));
		float fSlow136 = 0.5f / fSlow128;
		float fSlow137 = std::max<float>(1.0f, fConst0 * float(fVslider41));
		float fSlow138 = 1.0f / fSlow137;
		float fSlow139 = float(fVslider42);
		float fSlow140 = (1.0f - fSlow139) / std::max<float>(1.0f, fConst0 * float(fVslider43));
		float fSlow141 = 1.0f / std::max<float>(1.0f, fConst0 * float(fVslider44));
		float fSlow142 = float(fVslider45) + fSlow2;
		float fSlow143 = std::tan(fConst10 * fSlow4);
		float fSlow144 = 1.0f / fSlow143;
		float fSlow145 = (fSlow6 + fSlow144) / fSlow143 + 1.0f;
		float fSlow146 = 0.5f / (fSlow143 * fSlow145);
		float fSlow147 = 0.0f - fSlow146;
		float fSlow148 = 1.0f / fSlow145;
		float fSlow149 = (fSlow144 - fSlow6) / fSlow143 + 1.0f;
		float fSlow150 = 2.0f * (1.0f - 1.0f / Faust1_faustpower2_f(fSlow143));
		float fSlow151 = 0.5f / fSlow143;
		float fSlow152 = std::max<float>(1.0f, fConst0 * float(fVslider46));
		float fSlow153 = 1.0f / fSlow152;
		float fSlow154 = float(fVslider47);
		float fSlow155 = (1.0f - fSlow154) / std::max<float>(1.0f, fConst0 * float(fVslider48));
		float fSlow156 = 1.0f / std::max<float>(1.0f, fConst0 * float(fVslider49));
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			iRec2[0] = 1103515245 * iRec2[1] + 12345;
			float fTemp0 = 4.65661287e-10f * float(iRec2[0]);
			fRec1[0] = fTemp0 - fSlow11 * (fSlow12 * fRec1[2] + fSlow13 * fRec1[1]);
			fRec0[0] = fSlow10 * fRec1[2] + fSlow11 * (fSlow14 * fRec1[0] - (fSlow12 * fRec0[2] + fSlow13 * fRec0[1]));
			fVec0[0] = fSlow17;
			fRec3[0] = fSlow17 + fRec3[1] * float(fVec0[1] >= fSlow17);
			iRec4[0] = iSlow21 * (iRec4[1] + 1);
			float fTemp1 = float(iRec4[0]);
			fRec6[0] = fTemp0 - fSlow28 * (fSlow29 * fRec6[2] + fSlow30 * fRec6[1]);
			fRec5[0] = fSlow27 * fRec6[2] + fSlow28 * (fSlow31 * fRec6[0] - (fSlow29 * fRec5[2] + fSlow30 * fRec5[1]));
			fRec8[0] = fTemp0 - fSlow43 * (fSlow44 * fRec8[2] + fSlow45 * fRec8[1]);
			fRec7[0] = fSlow42 * fRec8[2] + fSlow43 * (fSlow46 * fRec8[0] - (fSlow44 * fRec7[2] + fSlow45 * fRec7[1]));
			fRec10[0] = fTemp0 - fSlow58 * (fSlow59 * fRec10[2] + fSlow60 * fRec10[1]);
			fRec9[0] = fSlow57 * fRec10[2] + fSlow58 * (fSlow61 * fRec10[0] - (fSlow59 * fRec9[2] + fSlow60 * fRec9[1]));
			fRec12[0] = fTemp0 - fSlow73 * (fSlow74 * fRec12[2] + fSlow75 * fRec12[1]);
			fRec11[0] = fSlow72 * fRec12[2] + fSlow73 * (fSlow76 * fRec12[0] - (fSlow74 * fRec11[2] + fSlow75 * fRec11[1]));
			fRec14[0] = fTemp0 - fSlow88 * (fSlow89 * fRec14[2] + fSlow90 * fRec14[1]);
			fRec13[0] = fSlow87 * fRec14[2] + fSlow88 * (fSlow91 * fRec14[0] - (fSlow89 * fRec13[2] + fSlow90 * fRec13[1]));
			fRec16[0] = fTemp0 - fSlow103 * (fSlow104 * fRec16[2] + fSlow105 * fRec16[1]);
			fRec15[0] = fSlow102 * fRec16[2] + fSlow103 * (fSlow106 * fRec16[0] - (fSlow104 * fRec15[2] + fSlow105 * fRec15[1]));
			fRec18[0] = fTemp0 - fSlow118 * (fSlow119 * fRec18[2] + fSlow120 * fRec18[1]);
			fRec17[0] = fSlow117 * fRec18[2] + fSlow118 * (fSlow121 * fRec18[0] - (fSlow119 * fRec17[2] + fSlow120 * fRec17[1]));
			fRec20[0] = fTemp0 - fSlow133 * (fSlow134 * fRec20[2] + fSlow135 * fRec20[1]);
			fRec19[0] = fSlow132 * fRec20[2] + fSlow133 * (fSlow136 * fRec20[0] - (fSlow134 * fRec19[2] + fSlow135 * fRec19[1]));
			fRec22[0] = fTemp0 - fSlow148 * (fSlow149 * fRec22[2] + fSlow150 * fRec22[1]);
			fRec21[0] = fSlow147 * fRec22[2] + fSlow148 * (fSlow151 * fRec22[0] - (fSlow149 * fRec21[2] + fSlow150 * fRec21[1]));
			float fTemp2 = fSlow0 * (fSlow3 * (fSlow9 * fRec0[0] + fSlow10 * fRec0[2]) * std::max<float>(0.0f, std::min<float>(fSlow16 * fRec3[0], std::max<float>(fSlow19 * (fSlow15 - fRec3[0]) + 1.0f, fSlow18)) * (1.0f - fSlow20 * fTemp1)) + fSlow22 * (fSlow26 * fRec5[0] + fSlow27 * fRec5[2]) * std::max<float>(0.0f, std::min<float>(fSlow33 * fRec3[0], std::max<float>(fSlow35 * (fSlow32 - fRec3[0]) + 1.0f, fSlow34)) * (1.0f - fSlow36 * fTemp1)) + fSlow37 * (fSlow41 * fRec7[0] + fSlow42 * fRec7[2]) * std::max<float>(0.0f, std::min<float>(fSlow48 * fRec3[0], std::max<float>(fSlow50 * (fSlow47 - fRec3[0]) + 1.0f, fSlow49)) * (1.0f - fSlow51 * fTemp1)) + fSlow52 * (fSlow56 * fRec9[0] + fSlow57 * fRec9[2]) * std::max<float>(0.0f, std::min<float>(fSlow63 * fRec3[0], std::max<float>(fSlow65 * (fSlow62 - fRec3[0]) + 1.0f, fSlow64)) * (1.0f - fSlow66 * fTemp1)) + fSlow67 * (fSlow71 * fRec11[0] + fSlow72 * fRec11[2]) * std::max<float>(0.0f, std::min<float>(fSlow78 * fRec3[0], std::max<float>(fSlow80 * (fSlow77 - fRec3[0]) + 1.0f, fSlow79)) * (1.0f - fSlow81 * fTemp1)) + fSlow82 * (fSlow86 * fRec13[0] + fSlow87 * fRec13[2]) * std::max<float>(0.0f, std::min<float>(fSlow93 * fRec3[0], std::max<float>(fSlow95 * (fSlow92 - fRec3[0]) + 1.0f, fSlow94)) * (1.0f - fSlow96 * fTemp1)) + fSlow97 * (fSlow101 * fRec15[0] + fSlow102 * fRec15[2]) * std::max<float>(0.0f, std::min<float>(fSlow108 * fRec3[0], std::max<float>(1.0f - fSlow110 * (fRec3[0] - fSlow107), fSlow109)) * (1.0f - fSlow111 * fTemp1)) + fSlow112 * (fSlow116 * fRec17[0] + fSlow117 * fRec17[2]) * std::max<float>(0.0f, std::min<float>(fSlow123 * fRec3[0], std::max<float>(1.0f - fSlow125 * (fRec3[0] - fSlow122), fSlow124)) * (1.0f - fSlow126 * fTemp1)) + fSlow127 * (fSlow131 * fRec19[0] + fSlow132 * fRec19[2]) * std::max<float>(0.0f, std::min<float>(fSlow138 * fRec3[0], std::max<float>(fSlow140 * (fSlow137 - fRec3[0]) + 1.0f, fSlow139)) * (1.0f - fSlow141 * fTemp1)) + fSlow142 * (fSlow146 * fRec21[0] + fSlow147 * fRec21[2]) * std::max<float>(0.0f, std::min<float>(fSlow153 * fRec3[0], std::max<float>(fSlow155 * (fSlow152 - fRec3[0]) + 1.0f, fSlow154)) * (1.0f - fSlow156 * fTemp1)));
			output0[i0] = FAUSTFLOAT(fTemp2);
			output1[i0] = FAUSTFLOAT(fTemp2);
			iRec2[1] = iRec2[0];
			fRec1[2] = fRec1[1];
			fRec1[1] = fRec1[0];
			fRec0[2] = fRec0[1];
			fRec0[1] = fRec0[0];
			fVec0[1] = fVec0[0];
			fRec3[1] = fRec3[0];
			iRec4[1] = iRec4[0];
			fRec6[2] = fRec6[1];
			fRec6[1] = fRec6[0];
			fRec5[2] = fRec5[1];
			fRec5[1] = fRec5[0];
			fRec8[2] = fRec8[1];
			fRec8[1] = fRec8[0];
			fRec7[2] = fRec7[1];
			fRec7[1] = fRec7[0];
			fRec10[2] = fRec10[1];
			fRec10[1] = fRec10[0];
			fRec9[2] = fRec9[1];
			fRec9[1] = fRec9[0];
			fRec12[2] = fRec12[1];
			fRec12[1] = fRec12[0];
			fRec11[2] = fRec11[1];
			fRec11[1] = fRec11[0];
			fRec14[2] = fRec14[1];
			fRec14[1] = fRec14[0];
			fRec13[2] = fRec13[1];
			fRec13[1] = fRec13[0];
			fRec16[2] = fRec16[1];
			fRec16[1] = fRec16[0];
			fRec15[2] = fRec15[1];
			fRec15[1] = fRec15[0];
			fRec18[2] = fRec18[1];
			fRec18[1] = fRec18[0];
			fRec17[2] = fRec17[1];
			fRec17[1] = fRec17[0];
			fRec20[2] = fRec20[1];
			fRec20[1] = fRec20[0];
			fRec19[2] = fRec19[1];
			fRec19[1] = fRec19[0];
			fRec22[2] = fRec22[1];
			fRec22[1] = fRec22[0];
			fRec21[2] = fRec21[1];
			fRec21[1] = fRec21[0];
		}
	}

};
/* ... END AUTO GENERATED BY THE FAUST COMPILER  */

using namespace iplug;

class Faust_Faust1 : public IPlugFaust
{
public:
  Faust_Faust1(const char* name,
              const char* inputDSPFile = 0,
              int nVoices = 1,
              int rate = 1,
              const char* outputCPPFile = 0,
              const char* drawPath = 0,
              const char* libraryPath = FAUST_SHARE_PATH)
  : IPlugFaust(name, nVoices)
  {
  }

  void Init() override
  {
    mMidiHandler = std::make_unique<iplug2_midi_handler>();
    mMidiUI = std::make_unique<MidiUI>(mMidiHandler.get());
      
    ::dsp* tmpDsp = new FAUSTCLASS();
    
    // Polyphony handling
    bool midiSync = false;
    int nvoices = 0;
    MidiMeta::analyse(tmpDsp, midiSync, nvoices);
    
    if (nvoices > 0)
    {
      dsp_poly* dspPoly = new FAUSTCLASS_POLY(tmpDsp, nvoices, true);
      mMidiHandler->addMidiIn(dspPoly);
      mDSP = std::unique_ptr<::dsp>(dspPoly);
    }
    else
    {
      mDSP = std::unique_ptr<::dsp>(tmpDsp);
    }
    
    // MIDI handling
    mDSP->buildUserInterface(mMidiUI.get());
    mDSP->buildUserInterface(this);
    
    BuildParameterMap();
    
    mInitialized = true;
  }
};

#undef FAUSTCLASS


#endif
